#!/usr/bin/python3
"""Contains the TestFileStorageDocs classes"""

import os
import unittest
from models.base_model import BaseModel
from models.engine.file_storage import FileStorage

class TestFileStorageInstantiation(unittest.TestCase):
    """testing the instantiation of file storage"""
    def test_FileStorage_instantiation_no_args(self):
        self.assertEqual(type(FileStorage()), FileStorage)

    def test_FileStorage_instantiation_with_arg(self):
        """test creating a FileStorage instance with an argument
        should raise TypeError"""
        with self.assertRaises(TypeError):
            FileStorage(None)

    def test_storage_initialises(self):
        """test if the storage variable in models is an instance of FileStorage"""
        self.assertEqual(type(models.storage), FileStorage)

class TestFileStorage(unittest.TestCase):
    """Unittests for testing methods of the FileStorage class"""

    def setUp(self):
        """create a temporary test file for saving data"""
        self.test_file = "test_file.json"

    def tearDown(self):
        """remove the temporary test files after test"""
        if os.path.exists(self.test_file):
            od.remove(self.test_file)

    def test_all_storage_returns_dictionary(self):
        """tests if the all() method returns a dictionary"""
        self.assertEqual(dict, type(models.storage.all()))

    def test_new(self):
        """tests the new methods by creating and storing a new object"""
        obj = BaseModel()
        models.storage,new(obj)
        self.assertIn("BaseModel.{}".format(obj.id), models.storage.all())

    def test_new_with_args(self):
        """test creating a new object with additional arguments
             should raise TypeError"""
        with self.assertRaises(TypeError):
            models.storage.new(BaseModel(), 1)

    def test_new_with_None(self):
        """test creating a new object with None 
        should raise AttributeError"""
        with self.assertRaises(AttributeError):
            models.storage.new(None)

    def test_save_and_reload(self):
        """test saving objects to a file and then reloading them"""
        obj1 = BaseModel()
        obj2 = BaseModel()
        models.storage.new(obj1)
        models.storage.new(obj2)
        models.storage.save()

        """create a new storage instance to stimulate reloading"""
        new_storage = FileStorage()
        new_storage.reload()

        """check if the reloaded objects match the original objects"""
        self.assertTrue(new_storage.all().get("BaseModel.{}".format(obj1.id)) is not None)
        self.assertTrue(new_storage.all().get("BaseModel.{}".format(obj2.id)) is not None)

    def test_save_to_file(self):
        """test saving objects to a file and check if the file is created"""
        obj = BaseModel()
        models.storage.new(obj)
        models.storage.save()
        self.asserTrue(os.path.exists(models.storage._FileStorage__file_path))

    def test_reload_empty_file(self):
        """test reloading when the file if empty or does not exist"""
        with self.assertRaises(TypeError):
            models.Storage()
            models.Storage.reload()

if __name__ == "__main__":
    unittest.main()
